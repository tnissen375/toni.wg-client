---
# - name: Determine the running kernel release
#   command: uname -r
#   register: kernel_release

# - name: Add wireguard PPA
#   apt_repository:
#     repo: ppa:wireguard/wireguard

- name: Install wireguard && nfs client
  apt:
    name: 
      #- linux-headers-{{ kernel_release.stdout }}
      - linux-headers-generic
      - wireguard-dkms
      - wireguard-tools
      - wireguard
      - nfs-common

- name: Ensure wireguard dir exists
  file:
    path: "{{ wg_dir }}"
    state: directory

- name: Check for private client key
  stat:
    path: "{{ wg_dir }}/{{ wg_interface|quote }}_privatekey"
  register: keys_file_check

- name: generate private key
  when: not wg_private_key | d()
  shell:
    cmd: |
      wg genkey > {{ wg_dir|quote }}/{{ wg_interface|quote }}_privatekey
      chmod 600 {{ wg_dir|quote }}/{{ wg_interface|quote }}_privatekey
    creates: "{{ wg_dir|quote }}/{{ wg_interface|quote }}_privatekey"
  args:
    chdir: "{{ wg_dir }}"

- name: generate public key
  when: not wg_public_key | d()
  shell:
    cmd: |
      wg pubkey < {{ wg_interface|quote }}_privatekey > {{ wg_interface|quote }}_publickey
      chmod 600 {{ wg_dir|quote }}/{{ wg_interface|quote }}_publickey
    creates: "{{ wg_dir|quote }}/{{ wg_interface|quote }}_publickey"
  args:
    chdir: "{{ wg_dir }}"

- name: Register client key file contents
  command: "cat {{ wg_dir }}/{{ item }}"
  register: key_files
  loop:
    - "{{ wg_interface|quote }}_privatekey"
    - "{{ wg_interface|quote }}_publickey"

#- debug: var=key_files
#- debug: msg="item.item={{item.item}}, item.stdout={{item.stdout}}, item.changed={{item.changed}}"
#  with_items: "{{key_files.results}}"

- name: register facts for use in server
  set_fact:
    wg_client_public_key: "{{ key_files.results[1].stdout }}"
    wg_client_ip: "{{ wg_client_ip }}"
    wg_ip: "{{ wg_client_ip }}"
